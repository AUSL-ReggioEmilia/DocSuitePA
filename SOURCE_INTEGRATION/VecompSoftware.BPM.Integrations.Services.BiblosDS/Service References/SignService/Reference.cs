//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BiblosDSObject", Namespace="http://BiblosDS/2009/10/BiblosDSObject")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content))]
    public partial class BiblosDSObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Certificate", Namespace="http://BiblosDS/2009/10/Certificate")]
    [System.SerializableAttribute()]
    public partial class Certificate : VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.BiblosDSObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CertificateVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateExpirationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateValidFromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FiscalCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HeaderInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdCertificateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IssuerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SerialNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CertificateVersion {
            get {
                return this.CertificateVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CertificateVersionField, value) != true)) {
                    this.CertificateVersionField = value;
                    this.RaisePropertyChanged("CertificateVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateExpiration {
            get {
                return this.DateExpirationField;
            }
            set {
                if ((this.DateExpirationField.Equals(value) != true)) {
                    this.DateExpirationField = value;
                    this.RaisePropertyChanged("DateExpiration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateValidFrom {
            get {
                return this.DateValidFromField;
            }
            set {
                if ((this.DateValidFromField.Equals(value) != true)) {
                    this.DateValidFromField = value;
                    this.RaisePropertyChanged("DateValidFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FiscalCode {
            get {
                return this.FiscalCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.FiscalCodeField, value) != true)) {
                    this.FiscalCodeField = value;
                    this.RaisePropertyChanged("FiscalCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HeaderInfo {
            get {
                return this.HeaderInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.HeaderInfoField, value) != true)) {
                    this.HeaderInfoField = value;
                    this.RaisePropertyChanged("HeaderInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid IdCertificate {
            get {
                return this.IdCertificateField;
            }
            set {
                if ((this.IdCertificateField.Equals(value) != true)) {
                    this.IdCertificateField = value;
                    this.RaisePropertyChanged("IdCertificate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Issuer {
            get {
                return this.IssuerField;
            }
            set {
                if ((object.ReferenceEquals(this.IssuerField, value) != true)) {
                    this.IssuerField = value;
                    this.RaisePropertyChanged("Issuer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SerialNumber {
            get {
                return this.SerialNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.SerialNumberField, value) != true)) {
                    this.SerialNumberField = value;
                    this.RaisePropertyChanged("SerialNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Content", Namespace="http://BiblosDS/2009/10/Content")]
    [System.SerializableAttribute()]
    public partial class Content : VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.BiblosDSObject {
        
        private byte[] BlobField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BlobStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] Blob {
            get {
                return this.BlobField;
            }
            set {
                if ((object.ReferenceEquals(this.BlobField, value) != true)) {
                    this.BlobField = value;
                    this.RaisePropertyChanged("Blob");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BlobString {
            get {
                return this.BlobStringField;
            }
            set {
                if ((object.ReferenceEquals(this.BlobStringField, value) != true)) {
                    this.BlobStringField = value;
                    this.RaisePropertyChanged("BlobString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComputeHashType", Namespace="http://BiblosDS/2009/10/ComputeHashType")]
    public enum ComputeHashType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SHA1 = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SHA256 = 256,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SignService.IServiceDigitalSign")]
    public interface IServiceDigitalSign {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetAllExpireDates", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetAllExpireDatesResponse")]
        VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesResponse GetAllExpireDates(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetAllExpireDates", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetAllExpireDatesResponse")]
        System.Threading.Tasks.Task<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesResponse> GetAllExpireDatesAsync(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/CalculateBlobHash", ReplyAction="http://tempuri.org/IServiceDigitalSign/CalculateBlobHashResponse")]
        VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content CalculateBlobHash(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.ComputeHashType computeHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/CalculateBlobHash", ReplyAction="http://tempuri.org/IServiceDigitalSign/CalculateBlobHashResponse")]
        System.Threading.Tasks.Task<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content> CalculateBlobHashAsync(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.ComputeHashType computeHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetContent", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetContentResponse")]
        VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content GetContent(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetContent", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetContentResponse")]
        System.Threading.Tasks.Task<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content> GetContentAsync(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/TimeStampDocument", ReplyAction="http://tempuri.org/IServiceDigitalSign/TimeStampDocumentResponse")]
        VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content TimeStampDocument(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content, bool InfoCamereFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/TimeStampDocument", ReplyAction="http://tempuri.org/IServiceDigitalSign/TimeStampDocumentResponse")]
        System.Threading.Tasks.Task<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content> TimeStampDocumentAsync(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content, bool InfoCamereFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/TimeStampDigitalDocument", ReplyAction="http://tempuri.org/IServiceDigitalSign/TimeStampDigitalDocumentResponse")]
        void TimeStampDigitalDocument(System.Guid idDocument, string timeStampAccount, System.Nullable<decimal> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/TimeStampDigitalDocument", ReplyAction="http://tempuri.org/IServiceDigitalSign/TimeStampDigitalDocumentResponse")]
        System.Threading.Tasks.Task TimeStampDigitalDocumentAsync(System.Guid idDocument, string timeStampAccount, System.Nullable<decimal> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetTimeStampAvailable", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetTimeStampAvailableResponse")]
        string GetTimeStampAvailable(string Service, string User, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetTimeStampAvailable", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetTimeStampAvailableResponse")]
        System.Threading.Tasks.Task<string> GetTimeStampAvailableAsync(string Service, string User, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/AddRawSignature", ReplyAction="http://tempuri.org/IServiceDigitalSign/AddRawSignatureResponse")]
        VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content AddRawSignature(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content SignerCert, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content SignedDigest, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/AddRawSignature", ReplyAction="http://tempuri.org/IServiceDigitalSign/AddRawSignatureResponse")]
        System.Threading.Tasks.Task<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content> AddRawSignatureAsync(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content SignerCert, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content SignedDigest, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/SignDigitalDocument", ReplyAction="http://tempuri.org/IServiceDigitalSign/SignDigitalDocumentResponse")]
        void SignDigitalDocument(System.Guid idDocument, string docDigest, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate signerCert, System.Nullable<decimal> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/SignDigitalDocument", ReplyAction="http://tempuri.org/IServiceDigitalSign/SignDigitalDocumentResponse")]
        System.Threading.Tasks.Task SignDigitalDocumentAsync(System.Guid idDocument, string docDigest, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate signerCert, System.Nullable<decimal> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/IsAlive", ReplyAction="http://tempuri.org/IServiceDigitalSign/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/IsAlive", ReplyAction="http://tempuri.org/IServiceDigitalSign/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetDigitalTimestampAvailable", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetDigitalTimestampAvailableResponse")]
        int GetDigitalTimestampAvailable(string timestampAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetDigitalTimestampAvailable", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetDigitalTimestampAvailableResponse")]
        System.Threading.Tasks.Task<int> GetDigitalTimestampAvailableAsync(string timestampAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetDocumentsHash", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetDocumentsHashResponse")]
        string[] GetDocumentsHash(System.Guid[] idDocuments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetDocumentsHash", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetDocumentsHashResponse")]
        System.Threading.Tasks.Task<string[]> GetDocumentsHashAsync(System.Guid[] idDocuments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/IsBlobSigned", ReplyAction="http://tempuri.org/IServiceDigitalSign/IsBlobSignedResponse")]
        bool IsBlobSigned(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/IsBlobSigned", ReplyAction="http://tempuri.org/IServiceDigitalSign/IsBlobSignedResponse")]
        System.Threading.Tasks.Task<bool> IsBlobSignedAsync(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content content);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllExpireDates", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAllExpireDatesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string fileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content;
        
        public GetAllExpireDatesRequest() {
        }
        
        public GetAllExpireDatesRequest(string fileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content) {
            this.fileName = fileName;
            this.Content = Content;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAllExpireDatesResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAllExpireDatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate[] GetAllExpireDatesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate FirstCertificate;
        
        public GetAllExpireDatesResponse() {
        }
        
        public GetAllExpireDatesResponse(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate[] GetAllExpireDatesResult, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate FirstCertificate) {
            this.GetAllExpireDatesResult = GetAllExpireDatesResult;
            this.FirstCertificate = FirstCertificate;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceDigitalSignChannel : VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.IServiceDigitalSign, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceDigitalSignClient : System.ServiceModel.ClientBase<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.IServiceDigitalSign>, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.IServiceDigitalSign {
        
        public ServiceDigitalSignClient() {
        }
        
        public ServiceDigitalSignClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceDigitalSignClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDigitalSignClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDigitalSignClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesResponse VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.IServiceDigitalSign.GetAllExpireDates(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesRequest request) {
            return base.Channel.GetAllExpireDates(request);
        }
        
        public VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate[] GetAllExpireDates(string fileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content, out VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate FirstCertificate) {
            VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesRequest inValue = new VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesRequest();
            inValue.fileName = fileName;
            inValue.Content = Content;
            VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesResponse retVal = ((VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.IServiceDigitalSign)(this)).GetAllExpireDates(inValue);
            FirstCertificate = retVal.FirstCertificate;
            return retVal.GetAllExpireDatesResult;
        }
        
        public System.Threading.Tasks.Task<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesResponse> GetAllExpireDatesAsync(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.GetAllExpireDatesRequest request) {
            return base.Channel.GetAllExpireDatesAsync(request);
        }
        
        public VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content CalculateBlobHash(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.ComputeHashType computeHash) {
            return base.Channel.CalculateBlobHash(Content, computeHash);
        }
        
        public System.Threading.Tasks.Task<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content> CalculateBlobHashAsync(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.ComputeHashType computeHash) {
            return base.Channel.CalculateBlobHashAsync(Content, computeHash);
        }
        
        public VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content GetContent(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content) {
            return base.Channel.GetContent(FileName, Content);
        }
        
        public System.Threading.Tasks.Task<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content> GetContentAsync(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content) {
            return base.Channel.GetContentAsync(FileName, Content);
        }
        
        public VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content TimeStampDocument(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content, bool InfoCamereFormat) {
            return base.Channel.TimeStampDocument(FileName, Content, InfoCamereFormat);
        }
        
        public System.Threading.Tasks.Task<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content> TimeStampDocumentAsync(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content, bool InfoCamereFormat) {
            return base.Channel.TimeStampDocumentAsync(FileName, Content, InfoCamereFormat);
        }
        
        public void TimeStampDigitalDocument(System.Guid idDocument, string timeStampAccount, System.Nullable<decimal> version) {
            base.Channel.TimeStampDigitalDocument(idDocument, timeStampAccount, version);
        }
        
        public System.Threading.Tasks.Task TimeStampDigitalDocumentAsync(System.Guid idDocument, string timeStampAccount, System.Nullable<decimal> version) {
            return base.Channel.TimeStampDigitalDocumentAsync(idDocument, timeStampAccount, version);
        }
        
        public string GetTimeStampAvailable(string Service, string User, string Password) {
            return base.Channel.GetTimeStampAvailable(Service, User, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetTimeStampAvailableAsync(string Service, string User, string Password) {
            return base.Channel.GetTimeStampAvailableAsync(Service, User, Password);
        }
        
        public VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content AddRawSignature(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content SignerCert, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content SignedDigest, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content) {
            return base.Channel.AddRawSignature(FileName, SignerCert, SignedDigest, Content);
        }
        
        public System.Threading.Tasks.Task<VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content> AddRawSignatureAsync(string FileName, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content SignerCert, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content SignedDigest, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content Content) {
            return base.Channel.AddRawSignatureAsync(FileName, SignerCert, SignedDigest, Content);
        }
        
        public void SignDigitalDocument(System.Guid idDocument, string docDigest, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate signerCert, System.Nullable<decimal> version) {
            base.Channel.SignDigitalDocument(idDocument, docDigest, signerCert, version);
        }
        
        public System.Threading.Tasks.Task SignDigitalDocumentAsync(System.Guid idDocument, string docDigest, VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Certificate signerCert, System.Nullable<decimal> version) {
            return base.Channel.SignDigitalDocumentAsync(idDocument, docDigest, signerCert, version);
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public int GetDigitalTimestampAvailable(string timestampAccount) {
            return base.Channel.GetDigitalTimestampAvailable(timestampAccount);
        }
        
        public System.Threading.Tasks.Task<int> GetDigitalTimestampAvailableAsync(string timestampAccount) {
            return base.Channel.GetDigitalTimestampAvailableAsync(timestampAccount);
        }
        
        public string[] GetDocumentsHash(System.Guid[] idDocuments) {
            return base.Channel.GetDocumentsHash(idDocuments);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDocumentsHashAsync(System.Guid[] idDocuments) {
            return base.Channel.GetDocumentsHashAsync(idDocuments);
        }
        
        public bool IsBlobSigned(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content content) {
            return base.Channel.IsBlobSigned(content);
        }
        
        public System.Threading.Tasks.Task<bool> IsBlobSignedAsync(VecompSoftware.BPM.Integrations.Services.BiblosDS.SignService.Content content) {
            return base.Channel.IsBlobSignedAsync(content);
        }
    }
}
