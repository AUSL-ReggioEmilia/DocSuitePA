using BiblosDS.LegalExtension.AdminPortal.Helpers;
using BiblosDS.LegalExtension.AdminPortal.ViewModel;
using BiblosDS.Library.Common.Objects;
using BiblosDS.Library.Common.Preservation.Services;
using log4net;
using Microsoft.AspNet.SignalR;
using Microsoft.AspNet.SignalR.Client;
using Newtonsoft.Json;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Threading;
using System.Threading.Tasks;
using VecompSoftware.BiblosDS.Model.CQRS.Notifications;
using VecompSoftware.BiblosDS.Model.CQRS.Preservations;
using VecompSoftware.BiblosDS.Model.Parameters;

namespace BiblosDS.LegalExtension.AdminPortal.Hubs
{
    [Authorize]
    public class PreservationHub : Hub
    {
        #region [ Fields ]
        private static readonly ILog _logger = LogManager.GetLogger(typeof(PreservationHub));
        private static readonly ConcurrentDictionary<string, HubConnection> _connections = new ConcurrentDictionary<string, HubConnection>();
        private static readonly JsonSerializerSettings _serializerSettings = new JsonSerializerSettings()
        {
            NullValueHandling = NullValueHandling.Include,
            TypeNameHandling = TypeNameHandling.Objects,
            ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
            PreserveReferencesHandling = PreserveReferencesHandling.All
        };
        private const string PRESERVATIONHUB_NAME = "PreservationHub";
        #endregion

        #region [ Properties ]

        #endregion

        #region [ Methods ]
        private async Task StartHubConnection(string correlationId)
        {
            HubConnection hubConnection = CreateClientHubConnection(correlationId);
            if (!_connections.TryAdd(correlationId, hubConnection))
            {
                throw new Exception();
            }

            IHubProxy preservationHubProxy = hubConnection.CreateHubProxy(PRESERVATIONHUB_NAME);
            preservationHubProxy.On<CommandNotify>("Notify", (n) => PreservationNotify(n, correlationId));
            await hubConnection.Start();
        }

        public async Task ExecutePreservation(string idTask)
        {
            PreservationService preservationService = new PreservationService();
            PreservationTask task = null;
            try
            {
                SendProgressMessage($"Inizio attività di conservazione per il task {idTask}, a breve verranno visualizzate le attività realtive allo stato di conservazione", ProgressMessageLevel.Info, Context.ConnectionId);
                SendProgressMessage($"L'attività potrebbe richiedere alcuni minuti, attendere prego...", ProgressMessageLevel.Info, Context.ConnectionId);
                if (!Guid.TryParse(idTask, out Guid taskId))
                {
                    throw new ArgumentException($"Il parametro passato non è nel formato corretto.", nameof(idTask));
                }

                task = preservationService.GetPreservationTask(taskId);
                if (string.IsNullOrEmpty(task.Archive.PreservationConfiguration))
                {
                    throw new Exception($"L'archivio {task.Archive.Name} non è stato configurato");
                }

                ArchiveConfiguration archiveConfiguration = JsonConvert.DeserializeObject<ArchiveConfiguration>(task.Archive.PreservationConfiguration);
                if (task.LockDate.HasValue)
                {
                    throw new Exception($"Il Task {taskId} è bloccato e non può essere processato");
                }


                if (task.IdPreservation.HasValue)
                {
                    throw new Exception($"Il Task {taskId} ha già una conservazione associata");
                }

                if (!preservationService.LockTask(task))
                {
                    throw new Exception($"Task is LOCK {task.IdPreservationTask}");
                }

                string correlationId = Context.ConnectionId;
                await StartHubConnection(correlationId);

                using (HttpClient client = new HttpClient())
                {
                    CommandExecutePreservation command = new CommandExecutePreservation();
                    command.ReferenceId = correlationId;
                    command.IdTask = taskId;
                    command.AutoGenerateNextTask = archiveConfiguration.AutoGeneratedNextTask;
                    command.PDVArchive = ConfigurationHelper.PDVArchiveName;
                    command.RDVArchive = ConfigurationHelper.RDVArchiveName;

                    await client.SendAsync(new HttpRequestMessage(HttpMethod.Post, $"{ConfigurationHelper.WCFHostWebAPIUrl}/api/CQRS")
                    {
                        Content = new ObjectContent<CommandExecutePreservation>(command, new JsonMediaTypeFormatter()
                        {
                            SerializerSettings = _serializerSettings
                        })
                    });
                }
            }
            catch (TaskCanceledException tex)
            {
                _logger.Warn("Il task ha impiegato molto tempo per l'esecuzione ed è stato annullato. L' attività di conservazione continuerà in background.", tex);
                SendProgressMessage("L'attività di conservazione stà impiegando più tempo del previsto. Si prega di attendere il completamento del processo.", ProgressMessageLevel.Warning, Context.ConnectionId);
            }
            catch (Exception ex)
            {
                _logger.Error("Error on create preservation", ex);
                if (task != null)
                {
                    preservationService.UnlockTask(task);
                }
                SendProgressMessage($"Errore nell'esecuzione dell'attività di conservazione: {ex.Message}", ProgressMessageLevel.Error, Context.ConnectionId);
            }            
        }

        public async Task PurgePreservation(string idPreservation)
        {
            try
            {
                SendProgressMessage($"Inizio attività di pulizia documenti dallo storage relativi alla conservazione {idPreservation}, a breve verranno visualizzate le attività realtive allo stato di cancellazione", ProgressMessageLevel.Info, Context.ConnectionId);
                SendProgressMessage($"L'attività potrebbe richiedere alcuni minuti, attendere prego...", ProgressMessageLevel.Info, Context.ConnectionId);
                if (!Guid.TryParse(idPreservation, out Guid preservationId))
                {
                    throw new ArgumentException($"Il parametro passato non è nel formato corretto.", nameof(idPreservation));
                }

                string correlationId = Context.ConnectionId;
                await StartHubConnection(correlationId);

                using (HttpClient client = new HttpClient())
                {
                    CommandPurgePreservation command = new CommandPurgePreservation();
                    command.ReferenceId = correlationId;
                    command.IdPreservation = preservationId;
                    command.Executor = Context.User.Identity.Name;

                    await client.SendAsync(new HttpRequestMessage(HttpMethod.Post, $"{ConfigurationHelper.WCFHostWebAPIUrl}/api/CQRS")
                    {
                        Content = new ObjectContent<CommandPurgePreservation>(command, new JsonMediaTypeFormatter()
                        {
                            SerializerSettings = _serializerSettings
                        })
                    });
                }
            }
            catch (TaskCanceledException tex)
            {
                _logger.Warn("Il task ha impiegato molto tempo per l'esecuzione ed è stato annullato. L'attività di cancellazione continuerà in background.", tex);
                SendProgressMessage("L'attività di cancellazione stà impiegando più tempo del previsto. Si prega di attendere il completamento del processo", ProgressMessageLevel.Warning, Context.ConnectionId);
            }
            catch (Exception ex)
            {
                SendProgressMessage($"Errore nell'esecuzione dell'attività di cancellazione: {ex.Message}", ProgressMessageLevel.Error, Context.ConnectionId);
            }            
        }

        public async Task ExecuteArchivePreservationConfiguration(string idArchive, string idCompany)
        {
            try
            {
                SendProgressMessage($"Inizio attività di configurazione impostazioni di conservazione per l'archivio {idArchive}, a breve verranno visualizzate le attività realtive allo stato di configurazione.", ProgressMessageLevel.Info, Context.ConnectionId);
                SendProgressMessage($"L'attività potrebbe richiedere alcuni minuti, attendere prego...", ProgressMessageLevel.Info, Context.ConnectionId);
                if (!Guid.TryParse(idArchive, out Guid archiveId))
                {
                    throw new ArgumentException($"Il parametro passato non è nel formato corretto.", nameof(idArchive));
                }

                if (!Guid.TryParse(idCompany, out Guid companyId))
                {
                    throw new ArgumentException($"Il parametro passato non è nel formato corretto.", nameof(idCompany));
                }

                string correlationId = Context.ConnectionId;
                await StartHubConnection(correlationId);

                using (HttpClient client = new HttpClient())
                {
                    CommandConfigureArchiveForPreservation command = new CommandConfigureArchiveForPreservation();
                    command.ReferenceId = correlationId;
                    command.IdArchive = archiveId;
                    command.IdCompany = companyId;

                    await client.SendAsync(new HttpRequestMessage(HttpMethod.Post, $"{ConfigurationHelper.WCFHostWebAPIUrl}/api/CQRS")
                    {
                        Content = new ObjectContent<CommandConfigureArchiveForPreservation>(command, new JsonMediaTypeFormatter()
                        {
                            SerializerSettings = _serializerSettings
                        })
                    });
                }
            }
            catch (TaskCanceledException tex)
            {
                _logger.Warn("Il task ha impiegato molto tempo per l'esecuzione ed è stato annullato. L'attività di configurazione continuerà in background.", tex);
                SendProgressMessage("L'attività di configurazione dell'archivio stà impiegando più tempo del previsto. Si prega di attendere il completamento del processo", ProgressMessageLevel.Warning, Context.ConnectionId);
            }
            catch (Exception ex)
            {
                SendProgressMessage($"Errore nell'esecuzione dell'attività di configurazione dell'archivio: {ex.Message}", ProgressMessageLevel.Error, Context.ConnectionId);
            }
        }

        private void PreservationNotify(CommandNotify notify, string correlationId)
        {
            if (Clients.Client(correlationId) != null)
            {
                ProgressMessageLevel level = (ProgressMessageLevel)notify.NotifyLevel;
                if (notify.Complete && notify.NotifyLevel != NotifyLevel.Error)
                {
                    level = ProgressMessageLevel.Complete;
                }
                SendProgressMessage(notify.Message, level, correlationId, notify.Details);
            }

            if (notify.Complete && _connections.TryGetValue(correlationId, out HubConnection hubConnection))
            {
                hubConnection.Stop();
            }
        }

        private void SendProgressMessage(string message, ProgressMessageLevel level, string correlationId)
        {
            SendProgressMessage(message, level, correlationId, null);
        }

        private void SendProgressMessage(string message, ProgressMessageLevel level, string correlationId, ICollection<NotificationDetailModel> details)
        {
            ProgressMessageViewModel model = new ProgressMessageViewModel()
            {
                TaskReferenceId = correlationId,
                Level = level,
                Message = message,
                Date = DateTime.Now                
            };

            if (details != null && details.Count > 0)
            {
                model.HasReport = true;
                WriteNotificationReport(correlationId, details);
            }

            if (Clients.Client(correlationId) != null)
            {
                Clients.Client(correlationId).notify(model);
            }
            Thread.Sleep(10);
        }

        private HubConnection CreateClientHubConnection(string correlationId)
        {
            if (string.IsNullOrEmpty(ConfigurationHelper.WCFHostWebAPIUrl))
            {
                throw new ArgumentNullException("Il parametro WCFHostWebAPIUrl non è stato definito nel file di configurazione");
            }

            Dictionary<string, string> querystringData = new Dictionary<string, string>
            {
                { "correlationId", correlationId }
            };
            return new HubConnection(ConfigurationHelper.WCFHostWebAPIUrl, querystringData);            
        }

        private void WriteNotificationReport(string correlationId, ICollection<NotificationDetailModel> details)
        {
            string tempFileName = $@"{ConfigurationHelper.GetAppDataPath()}\{correlationId}.json";
            List<NotificationDetailModel> existingModel = new List<NotificationDetailModel>();
            if (File.Exists(tempFileName))
            {
                existingModel = JsonConvert.DeserializeObject<List<NotificationDetailModel>>(File.ReadAllText(tempFileName));
            }
            
            existingModel.AddRange(details);
            File.WriteAllText(tempFileName, JsonConvert.SerializeObject(details));
        }
        #endregion
    }
}