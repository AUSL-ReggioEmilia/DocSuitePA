//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BiblosDS.WindowsService.Library.ServiceReferenceDigitalSign {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceDigitalSign.IServiceDigitalSign")]
    public interface IServiceDigitalSign {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetAllExpireDates", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetAllExpireDatesResponse")]
        System.ComponentModel.BindingList<BiblosDS.Library.Common.Objects.DocumentCertificate> GetAllExpireDates(out BiblosDS.Library.Common.Objects.DocumentCertificate FirstCertificate, string fileName, BiblosDS.Library.Common.Objects.DocumentContent Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/CalculateBlobHash", ReplyAction="http://tempuri.org/IServiceDigitalSign/CalculateBlobHashResponse")]
        BiblosDS.Library.Common.Objects.DocumentContent CalculateBlobHash(BiblosDS.Library.Common.Objects.DocumentContent Content, BiblosDS.Library.Common.Objects.Enums.ComputeHashType computeHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetContent", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetContentResponse")]
        BiblosDS.Library.Common.Objects.DocumentContent GetContent(string FileName, BiblosDS.Library.Common.Objects.DocumentContent Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/TimeStampDocument", ReplyAction="http://tempuri.org/IServiceDigitalSign/TimeStampDocumentResponse")]
        BiblosDS.Library.Common.Objects.DocumentContent TimeStampDocument(string FileName, BiblosDS.Library.Common.Objects.DocumentContent Content, bool InfoCamereFormat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/TimeStampDigitalDocument", ReplyAction="http://tempuri.org/IServiceDigitalSign/TimeStampDigitalDocumentResponse")]
        void TimeStampDigitalDocument(System.Guid idDocument, string timeStampAccount, System.Nullable<decimal> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetTimeStampAvailable", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetTimeStampAvailableResponse")]
        string GetTimeStampAvailable(string Service, string User, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/AddRawSignature", ReplyAction="http://tempuri.org/IServiceDigitalSign/AddRawSignatureResponse")]
        BiblosDS.Library.Common.Objects.DocumentContent AddRawSignature(string FileName, BiblosDS.Library.Common.Objects.DocumentContent SignerCert, BiblosDS.Library.Common.Objects.DocumentContent SignedDigest, BiblosDS.Library.Common.Objects.DocumentContent Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/SignDigitalDocument", ReplyAction="http://tempuri.org/IServiceDigitalSign/SignDigitalDocumentResponse")]
        void SignDigitalDocument(System.Guid idDocument, string docDigest, BiblosDS.Library.Common.Objects.DocumentCertificate signerCert, System.Nullable<decimal> version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/IsAlive", ReplyAction="http://tempuri.org/IServiceDigitalSign/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetDigitalTimestampAvailable", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetDigitalTimestampAvailableResponse")]
        int GetDigitalTimestampAvailable(string timestampAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/GetDocumentsHash", ReplyAction="http://tempuri.org/IServiceDigitalSign/GetDocumentsHashResponse")]
        System.ComponentModel.BindingList<string> GetDocumentsHash(System.ComponentModel.BindingList<System.Guid> idDocuments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceDigitalSign/IsBlobSigned", ReplyAction="http://tempuri.org/IServiceDigitalSign/IsBlobSignedResponse")]
        bool IsBlobSigned(BiblosDS.Library.Common.Objects.DocumentContent content);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceDigitalSignChannel : BiblosDS.WindowsService.Library.ServiceReferenceDigitalSign.IServiceDigitalSign, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceDigitalSignClient : System.ServiceModel.ClientBase<BiblosDS.WindowsService.Library.ServiceReferenceDigitalSign.IServiceDigitalSign>, BiblosDS.WindowsService.Library.ServiceReferenceDigitalSign.IServiceDigitalSign {
        
        public ServiceDigitalSignClient() {
        }
        
        public ServiceDigitalSignClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceDigitalSignClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDigitalSignClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceDigitalSignClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.ComponentModel.BindingList<BiblosDS.Library.Common.Objects.DocumentCertificate> GetAllExpireDates(out BiblosDS.Library.Common.Objects.DocumentCertificate FirstCertificate, string fileName, BiblosDS.Library.Common.Objects.DocumentContent Content) {
            return base.Channel.GetAllExpireDates(out FirstCertificate, fileName, Content);
        }
        
        public BiblosDS.Library.Common.Objects.DocumentContent CalculateBlobHash(BiblosDS.Library.Common.Objects.DocumentContent Content, BiblosDS.Library.Common.Objects.Enums.ComputeHashType computeHash) {
            return base.Channel.CalculateBlobHash(Content, computeHash);
        }
        
        public BiblosDS.Library.Common.Objects.DocumentContent GetContent(string FileName, BiblosDS.Library.Common.Objects.DocumentContent Content) {
            return base.Channel.GetContent(FileName, Content);
        }
        
        public BiblosDS.Library.Common.Objects.DocumentContent TimeStampDocument(string FileName, BiblosDS.Library.Common.Objects.DocumentContent Content, bool InfoCamereFormat) {
            return base.Channel.TimeStampDocument(FileName, Content, InfoCamereFormat);
        }
        
        public void TimeStampDigitalDocument(System.Guid idDocument, string timeStampAccount, System.Nullable<decimal> version) {
            base.Channel.TimeStampDigitalDocument(idDocument, timeStampAccount, version);
        }
        
        public string GetTimeStampAvailable(string Service, string User, string Password) {
            return base.Channel.GetTimeStampAvailable(Service, User, Password);
        }
        
        public BiblosDS.Library.Common.Objects.DocumentContent AddRawSignature(string FileName, BiblosDS.Library.Common.Objects.DocumentContent SignerCert, BiblosDS.Library.Common.Objects.DocumentContent SignedDigest, BiblosDS.Library.Common.Objects.DocumentContent Content) {
            return base.Channel.AddRawSignature(FileName, SignerCert, SignedDigest, Content);
        }
        
        public void SignDigitalDocument(System.Guid idDocument, string docDigest, BiblosDS.Library.Common.Objects.DocumentCertificate signerCert, System.Nullable<decimal> version) {
            base.Channel.SignDigitalDocument(idDocument, docDigest, signerCert, version);
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public int GetDigitalTimestampAvailable(string timestampAccount) {
            return base.Channel.GetDigitalTimestampAvailable(timestampAccount);
        }
        
        public System.ComponentModel.BindingList<string> GetDocumentsHash(System.ComponentModel.BindingList<System.Guid> idDocuments) {
            return base.Channel.GetDocumentsHash(idDocuments);
        }
        
        public bool IsBlobSigned(BiblosDS.Library.Common.Objects.DocumentContent content) {
            return base.Channel.IsBlobSigned(content);
        }
    }
}
