using Newtonsoft.Json;
using System;
using System.Collections.Concurrent;

namespace BiblosDS.Library.Helper
{
    public class PreservationHelper
    {
        private static ConcurrentDictionary<string, ArchiveConfiguration> _archiveConfigurations = new ConcurrentDictionary<string, ArchiveConfiguration>();

        private static ArchiveConfiguration ManageArchive(string path)
        {
            ArchiveConfiguration archiveConfiguration;
            if (!_archiveConfigurations.TryGetValue(path, out archiveConfiguration))
            {
                archiveConfiguration = JsonConvert.DeserializeObject<ArchiveConfiguration>(System.IO.File.ReadAllText(path));
                if (!_archiveConfigurations.TryAdd(path, archiveConfiguration))
                {
                    throw new Exception("PreservationHelper : Concurrent Anomaly");
                }
            }
            return archiveConfiguration;
        }

        public static DateTime? GetPreservationLimitTaskToDocumentDate(string path)
        {
            ArchiveConfiguration archiveConfiguration = ManageArchive(path);
            return archiveConfiguration.PreservationLimitTaskToDocumentDate;
        }

        public static bool GetForceAutoInc(string path)
        {
            ArchiveConfiguration archiveConfiguration = ManageArchive(path);
            return archiveConfiguration.ForceAutoInc;
        }

        public static bool GetPreservationAutoClose(string path)
        {
            ArchiveConfiguration archiveConfiguration = ManageArchive(path);
            return archiveConfiguration.PreservationAutoClose;
        }

        public static bool GetAutoGeneratedNextTask(string path)
        {
            ArchiveConfiguration archiveConfiguration = ManageArchive(path);
            return archiveConfiguration.AutoGeneratedNextTask;
        }

        public static bool GetCloseWithoutVerify(string path)
        {
            ArchiveConfiguration archiveConfiguration = ManageArchive(path);
            return archiveConfiguration.CloseWithoutVerify;
        }

        public static bool GetCheckTsd(string path)
        {
            ArchiveConfiguration archiveConfiguration = ManageArchive(path);
            return archiveConfiguration.CheckTsd;
        }

        public static ArchiveConfiguration GetArchiveConfiguration(string path)
        {
            ArchiveConfiguration archiveConfiguration = ManageArchive(path);
            return archiveConfiguration;
        }

        public static bool UpdateArchiveConfiguration(ArchiveConfiguration archiveConfig, string path)
        {
            bool result = true;
            try
            {
                string jsonContent = JsonConvert.SerializeObject(archiveConfig, Formatting.Indented);

                if (!System.IO.File.Exists(path))
                {
                    System.IO.File.Create(path).Close();
                }

                System.IO.File.WriteAllText(path, jsonContent);

                _archiveConfigurations.TryRemove(path, out archiveConfig);

                if (archiveConfig == null)
                {
                    result = false;
                }

                return result;
            }
            catch(Exception ex)
            {
                throw new Exception("PreservationHelper: UpdateArchibeConfiguration failed");
            }
        }
    }
}
