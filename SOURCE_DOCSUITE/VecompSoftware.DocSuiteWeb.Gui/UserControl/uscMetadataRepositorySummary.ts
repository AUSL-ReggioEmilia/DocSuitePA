/// <reference path="../scripts/typings/telerik/telerik.web.ui.d.ts" />/// <reference path="../scripts/typings/moment/moment.d.ts" />/// <reference path="../scripts/typings/telerik/microsoft.ajax.d.ts" />import ServiceConfiguration = require('App/Services/ServiceConfiguration');import MetadataRepositoryBase = require('Tblt/MetadataRepositoryBase');import ServiceConfigurationHelper = require('App/Helpers/ServiceConfigurationHelper');import MetadataRepositoryModel = require('App/Models/Commons/MetadataRepositoryModel');import ExceptionDTO = require('App/DTOs/ExceptionDTO');import UscErrorNotification = require('UserControl/uscErrorNotification');import MetadataViewModel = require('App/ViewModels/Metadata/MetadataViewModel');import BaseFieldViewModel = require('App/ViewModels/Metadata/BaseFieldViewModel');class uscMetadataRepositorySummary extends MetadataRepositoryBase {    uscNotificationId: string;    componentTextId: string;
    componentDateId: string;
    componentNumberId: string;
    componentCheckBoxId: string;
    componentTitleId: string;
    componentCommentId: string;
    componentEnumId: string;    integerId: number;    pageContentId: string;    private _serviceConfigurations: ServiceConfiguration[];    /**     * Costruttore     * @param serviceConfigurations     */    constructor(serviceConfigurations: ServiceConfiguration[]) {        super(ServiceConfigurationHelper.getService(serviceConfigurations, MetadataRepositoryBase.METADATA_REPOSITORY_NAME));        this._serviceConfigurations = serviceConfigurations;    }    /**     * ------------------------------------ Events ---------------------------     */    /**     * inizializzazione     */    initialize() {        super.initialize();        this.integerId = 1;        this.bindLoaded();    }    /**     * ----------------------------------- Methods ----------------------------     */    /**     * funzione che carica le componenti della pagina     * @param idMetadataRepository     */    loadMetadataRepository(idMetadataRepository: string) {        this._service.getFullModelById(idMetadataRepository,            (data: MetadataRepositoryModel) => {                if (data) {                    this.loadPageItems(data);                }            },            (exception: ExceptionDTO) => {                let uscNotification: UscErrorNotification = <UscErrorNotification>$("#".concat(this.uscNotificationId)).data();                if (exception && uscNotification && exception instanceof ExceptionDTO) {                    if (!jQuery.isEmptyObject(uscNotification)) {                        uscNotification.showNotification(exception);                    }                }            });    }    /**     * funzione che aggiunge tutte le componenti corrispondenti al Json del menu     */     loadPageItems(metadataRepositoryModel: MetadataRepositoryModel) {        let metadataViewModel: MetadataViewModel = JSON.parse(metadataRepositoryModel.JsonMetadata);        let element;        let content: HTMLElement = document.getElementById("menuContent");        let idCloned: string;        let labelElement: HTMLLabelElement;        let requiredElement: HTMLInputElement;        this.clearPage();        idCloned = this.cloneElement(this.componentTitleId, this.integerId);        this.integerId++;        labelElement = this.findLabelElement(idCloned, 0);        labelElement.textContent = metadataRepositoryModel.Name;        $.each(metadataViewModel.TextFields, (index: number, textFieldViewModel) => {            idCloned = this.fillHTMLElement(this.componentTextId, this.integerId, textFieldViewModel);            this.integerId++;        });        $.each(metadataViewModel.NumberFields, (index: number, numberFieldViewModel) => {            idCloned = this.fillHTMLElement(this.componentNumberId, this.integerId, numberFieldViewModel);            this.integerId++;        });        $.each(metadataViewModel.DateFields, (index: number, dateFieldViewModel) => {            idCloned = this.fillHTMLElement(this.componentDateId, this.integerId, dateFieldViewModel);            this.integerId++;        });        $.each(metadataViewModel.BoolFields, (index: number, boolFieldViewModel) => {            idCloned = this.fillHTMLElement(this.componentCheckBoxId, this.integerId, boolFieldViewModel);            this.integerId++;        });        $.each(metadataViewModel.EnumFields, (index: number, enumFieldViewModel) => {            idCloned = this.fillHTMLElement(this.componentEnumId, this.integerId, enumFieldViewModel);            this.integerId++;            $.each(enumFieldViewModel.Options, (index: number, option) => {                let node: HTMLElement = document.createElement("LI");                if (enumFieldViewModel.Options[index] != "") {                    this.createNewNode((Number(index)).toString().concat(") ", enumFieldViewModel.Options[index]), node, idCloned);
                }            });        });        $.each(metadataViewModel.DiscussionFields, (index: number, discussionFieldViewModel) => {            idCloned = this.fillHTMLElement(this.componentCommentId, this.integerId, discussionFieldViewModel);            this.integerId++;        });    }    /**
     * Scateno l'evento di "Load Completed" del controllo
     */
    private bindLoaded(): void {
        $("#".concat(this.pageContentId)).data(this);
    }    fillHTMLElement(idComponent: string, incrementalInteger: number, model: BaseFieldViewModel): string {
        let idCloned: string = this.cloneElement(idComponent, incrementalInteger);
        let labelElement: HTMLLabelElement = this.findLabelElement(idCloned, 1);        let requiredElement: HTMLInputElement = this.findInputCheckBoxElement(idCloned, 0);        labelElement.textContent = model.Label;        requiredElement.checked = model.Required;

        return idCloned;
    }}export = uscMetadataRepositorySummary;